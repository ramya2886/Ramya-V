# -*- coding: utf-8 -*-
"""AI Driven traffic accident .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VhpEkyvdtaCB65UhSJv6cKAUAdz83IvP
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns

import matplotlib.pyplot as plt
# plt.style.use('dark_background')
# %matplotlib inline

import sklearn
from sklearn.utils import resample
from sklearn.metrics import accuracy_score, f1_score, precision_score, log_loss, recall_score
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
from sklearn.model_selection import cross_val_score, GridSearchCV, train_test_split
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, OrdinalEncoder
from sklearn.ensemble import AdaBoostClassifier, BaggingClassifier, ExtraTreesClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
!pip install lightgbm
from lightgbm import LGBMClassifier

df = pd.read_csv("/content/6accident_data.csv")
df.head()

print(df.isnull().sum())

"""Data processing

"""

df.describe(include ='all')

"""Data cleaning

"""

df = df.drop(['Location_Easting_OSGR', 'Location_Northing_OSGR'], axis=1)
df.shape

#standardize all column names to lowercase, and remove some characters
#for ease of use in querying
df.columns = map(str.lower, df.columns)
df.columns = df.columns.str.replace(".", '', regex=False)
df.columns = df.columns.str.replace("(", '', regex=False)
df.columns = df.columns.str.replace(")", '', regex=False)
#convert date/time to datetime datatype

df['date'] = pd.to_datetime((df['date']), format= "%d-%m-%Y")
df.dtypes

#mistyped datatypes
df[['did_police_officer_attend_scene_of_accident',
    '1st_road_number',
    '2nd_road_number',
    'pedestrian_crossing-physical_facilities',
    'pedestrian_crossing-human_control']]= df[['did_police_officer_attend_scene_of_accident',
    '1st_road_number',
    '2nd_road_number',
    'pedestrian_crossing-physical_facilities',
   'pedestrian_crossing-human_control']].astype('object')
df.columns.to_series().groupby(df.dtypes).groups

df.isnull().sum().sort_values(ascending=False)/df.shape[0]*100

df['age_of_vehicle'].median()

df['age_of_vehicle'].describe()

#df = df.drop(['2nd_road_class'], axis=1)
df['driver_imd_decile'].fillna(method='ffill', inplace=True)
df['age_of_vehicle'].describe()

df['model'].describe()

df = df.drop(['lsoa_of_accident_location', '2nd_road_number','make'], axis=1)
df.dropna(inplace=True)

#last check
df.isnull().sum().sort_values(ascending=False)/df.shape[0]*100

df.shape

df_num = df[['number_of_casualties','number_of_vehicles','speed_limit']]
df_num.hist( bins=25, grid=False, figsize=(12,8))
df['number_of_casualties'].value_counts()

def casualities(num_cas):
    if num_cas >=1 and num_cas <2:
        return "1"
    elif num_cas >=2 and num_cas <3:
        return "2"
    elif num_cas >=3 and num_cas <4:
        return "3"
    elif num_cas >= 4 and num_cas <5:
        return "4"
    elif num_cas >= 5:
        return "5+"

df['number_of_casualties']= df['number_of_casualties'].apply(casualities)
df['number_of_casualties'].value_counts()

df.nunique().sort_values(ascending=False)

df['date'] = pd.to_datetime(df['date'])
df['month'] = df ['date'].apply(lambda time: time.month)
#creating a weekend feature that includes Friday-Sunday
df['weekend']= np.where(df['day_of_week'].isin(['Friday', 'Saturday', 'Sunday']), 1, 0)
timeofdaygroups = {1: "Morning Rush (6-10)",
                   2: "Day (10-12)",
                   3: "Lunch Rush (12-14)",
                   4: "Afternoon (14-16)",
                   5: "After Work Rush (16-18)",
                   6: "Evening (18-22)",
                   7: "Night (22-6)"}
df['hour'] = df['time'].str[0:2]
df['hour'] =  pd.to_numeric(df['hour'])
df['hour'] = df['hour'].astype('int')
def daygroup(hour):
    if hour >= 6 and hour < 10:
        return "1"
    elif hour >= 10 and hour < 12:
        return "2"
    elif hour >= 12 and hour < 14:
        return "3"
    elif hour >= 14 and hour < 16:
        return "4"
    elif hour >= 16 and hour < 18:
        return "5"
    elif hour >= 18 and hour < 22:
        return "6"
    else:
        return "7"

df['time_of_day']= df['hour'].apply(daygroup)

df[['weekend','day_of_week','time', 'time_of_day']].tail(10)

df['vehicle_type'] = df['vehicle_type'].replace(to_replace="Motorcycle over 500cc", value="Motorcycle")
df['vehicle_type'] = df['vehicle_type'].replace(to_replace= "Motorcycle over 125cc and up to 500cc",value="Motorcycle")
df['vehicle_type'] = df['vehicle_type'].replace(to_replace="Motorcycle 125cc and under", value="Motorcycle")
df['vehicle_type'] = df['vehicle_type'].replace(to_replace="Motorcycle 50cc and under", value="Motorcycle")
df['vehicle_type'] = df['vehicle_type'].replace(to_replace="Motorcycle - unknown cc", value="Motorcycle")

df['vehicle_type'] = df['vehicle_type'].replace(to_replace="Van / Goods 3.5 tonnes mgw or under", value="Goods Vehicle")
df['vehicle_type'] = df['vehicle_type'].replace(to_replace="Goods over 3.5t. and under 7.5t", value="Goods Vehicle")
df['vehicle_type'] = df['vehicle_type'].replace(to_replace="Goods 7.5 tonnes mgw and over", value="Goods Vehicle")

df['vehicle_type'] = df['vehicle_type'].replace(to_replace="Taxi/Private hire car", value="Car")

df['vehicle_type'] = df['vehicle_type'].replace(to_replace="Minibus (8 - 16 passenger seats)", value="Bus")
df['vehicle_type'] = df['vehicle_type'].replace(to_replace="Bus or coach (17 or more pass seats)",value="Bus")
df['vehicle_type'] = df['vehicle_type'].replace(to_replace="Agricultural vehicle", value="Other Vehicle")
df['vehicle_type'] = df['vehicle_type'].replace(to_replace="Other vehicle", value="Other Vehicle")
df['vehicle_type'].value_counts()/df.shape[0]*100

df['age_band_of_driver']=df['age_band_of_driver'].replace("Over 75","75-100")
#df.drop(df[df['age_band_of_driver'] == 'Data missing or out of range'].index, inplace=True)
df['age_band_of_driver']=df['age_band_of_driver'].replace("Data missing or out of range","11 - 15")
df.drop(df[df['age_band_of_driver'] == 'Nov-15'].index, inplace=True)
df.drop(df[df['age_band_of_driver'] == '06-Oct'].index, inplace=True)
df['age_band_of_driver'].value_counts()/df.shape[0]*100

def vehicles(num_veh):
    if num_veh >=1 and num_veh <2:
        return "1"
    elif num_veh >=2 and num_veh <3:
        return "2"
    elif num_veh >=3 and num_veh <4:
        return "3"
    elif num_veh >= 4:
        return "4+"


df['number_of_vehicles']= df['number_of_vehicles'].apply(vehicles)
df['number_of_vehicles'].value_counts()/df.shape[0]*100

def enginecap(eng_cc):
    if eng_cc <=1500:
        return "small engine cc"
    if eng_cc >1500 and eng_cc <=2000:
        return "medium engine cc"
    if eng_cc >2000:
        return "large engine cc"


df['engine_capacity_cc_size'] = df['engine_capacity_cc'].apply(enginecap)
df['accident_severity'].value_counts()/df.shape[0]*100

def enginecap(eng_cc):
    if eng_cc <=1500:
        return "small engine cc"
    if eng_cc >1500 and eng_cc <=2000:
        return "medium engine cc"
    if eng_cc >2000:
        return "large engine cc"


df['engine_capacity_cc_size'] = df['engine_capacity_cc'].apply(enginecap)
df['accident_severity'].value_counts()/df.shape[0]*100

df['accident_seriousness'] = df['accident_severity']
df['accident_seriousness'] = df['accident_seriousness'].replace(to_replace="Slight",value="Not Serious")
df['accident_seriousness'] = df['accident_seriousness'].replace(to_replace="Serious",value="Serious")
df['accident_seriousness'] = df['accident_seriousness'].replace(to_replace="Fatal",value="Fatal")
df.shape

df['accident_seriousness'].value_counts()/df.shape[0]*100

df.accident_seriousness.value_counts()

"""Data visualization"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
try:
    df = pd.read_csv('/content/6accident_data.csv')
except FileNotFoundError:
    print("Error: '/content/6accident_data.csv' not found. Please provide the correct path to your data file.")
    # You might want to exit or handle the error in a different way here
    exit()
# prepare plot
plt.style.use('default')
plt.figure(figsize=(20,10))
colors = sns.color_palette("plasma_r", n_colors=12)
mt=sns.barplot(x=accidentspermonth.index, y=accidentspermonth.values, palette=colors)
sns.despine(top=True, right=True, left=True, bottom=True)
#ax is the axes instance
group_labels = ['Jan', 'Feb','Mar','Apr','May','June','July','Aug','Sept','Oct','Nov','Dec' ]

mt.set_xticklabels(group_labels)
plt.title("Accidents Per Month",fontsize=20,fontweight="bold")
plt.xticks(fontsize=18)
plt.yticks(fontsize=12)
plt.xlabel("\nMonth", fontsize=15, fontweight="bold")
plt.ylabel("\nNumber of Accidents", fontsize=15, fontweight="bold")
plt.tight_layout()
plt.show()

